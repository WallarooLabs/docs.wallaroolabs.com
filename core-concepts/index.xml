<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wallaroo Core Concepts on Wallaroo</title>
    <link>https://docs.wallaroolabs.com/core-concepts/</link>
    <description>Recent content in Wallaroo Core Concepts on Wallaroo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.wallaroolabs.com/core-concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aggregations</title>
      <link>https://docs.wallaroolabs.com/core-concepts/aggregations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/core-concepts/aggregations/</guid>
      <description>Aggregations are an alternative to state computations that trade some of the freedom provided by state computations for the ability to efficiently compute results in windows.
An aggregation consists of four parts: 1) The initial accumulator state. 2) An update function that takes an input and the accumulator state and optionally updates the accumulator. 3) A combine function that takes two accumulators and returns an accumulator that represents the combine of both of them.</description>
    </item>
    
    <item>
      <title>Partitioning</title>
      <link>https://docs.wallaroolabs.com/core-concepts/partitioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/core-concepts/partitioning/</guid>
      <description>If all of the application state exists in one state object then only one state computation at a time can access that state object. In order to leverage concurrency, that state needs to be divided into multiple distinct state objects. Wallaroo can then automatically distribute these objects in a way that allows them to be accessed by state computations in parallel.
For example, in an application that keeps track of stock prices, the na√Øve application state might be a dictionary where the stock symbol is used to look up the price of the stock.</description>
    </item>
    
    <item>
      <title>State</title>
      <link>https://docs.wallaroolabs.com/core-concepts/state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/core-concepts/state/</guid>
      <description>The expectation with Wallaroo is that most applications will be stateful. Understanding how Wallaroo handles state is key to being able to design effective Wallaroo applications. In this section, we&amp;rsquo;re going to take you through how state works in Wallaroo and what advantages this brings.
Transactions in Wallaroo Transactions are awesome. Using a data management system that features transactions makes our lives as programmers much easier. Transactions provide certain guarantees about how data will be updated that make it easier to reason about our code, easier to understand what our code will do.</description>
    </item>
    
    <item>
      <title>Windows</title>
      <link>https://docs.wallaroolabs.com/core-concepts/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/core-concepts/windows/</guid>
      <description>Wallaroo supports windowing over aggregations. This allows you to break an infinite stream into manageable chunks and also allows you to see how your inputs evolve over time.
There are two broad categories of windows currently supported: count-based and range-based. Range-based windows can be further divided into tumbling and sliding varieties. We&amp;rsquo;ll look at each of these in turn.
If you are not familiar with aggregations in Wallaroo, it might be helpful to read this section before proceeding.</description>
    </item>
    
    <item>
      <title>Working with State</title>
      <link>https://docs.wallaroolabs.com/core-concepts/working-with-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/core-concepts/working-with-state/</guid>
      <description>Wallaroo&amp;rsquo;s state objects allow developers to define their own domain-specific data structures that Wallaroo manages. These state objects are used to store state in running application. They provide safe, serialized access to data in a highly parallelized environment. In &amp;ldquo;Working in State&amp;rdquo;, we are going to take you through how you can operate on your state objects.
State computations Imagine a word counting application. We&amp;rsquo;ll have a state object for each different word.</description>
    </item>
    
  </channel>
</rss>