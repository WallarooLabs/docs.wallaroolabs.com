<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pony API Introduction on Wallaroo</title>
    <link>https://docs.wallaroolabs.com/pony-tutorial/</link>
    <description>Recent content in Pony API Introduction on Wallaroo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.wallaroolabs.com/pony-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running A Wallaroo Application</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/running-a-wallaroo-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/running-a-wallaroo-application/</guid>
      <description>You should have already completed the setup instructions in the &amp;ldquo;Pony Installation&amp;rdquo; guide.
  Running the Application Wallaroo applications are built using the Pony compiler. The compiler will build our application along with any other tools used, optimize it, and link whatever libraries were needed. Once compiled, the application can be run over and over again, independently from the compiler or anything else. It will exist as a complete program on it&amp;rsquo;s own.</description>
    </item>
    
    <item>
      <title>Starting a new shell</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/starting-a-new-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/starting-a-new-shell/</guid>
      <description>In this section, we&amp;rsquo;re going to review how you can start a new shell for Wallaroo regardless of how you installed it.
Wallaroo in Docker For each Shell you&amp;rsquo;re expected to setup, you&amp;rsquo;d have to run the following to enter the Wallaroo Docker container:
Enter the Wallaroo Docker container:
docker exec -it wally env-setup  This command will start a new Bash shell within the container, which will run the env-setup script to ensure our Wallaroo code repository is set up.</description>
    </item>
    
    <item>
      <title>TCP Decoders and Encoders</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/tcp-decoders-and-encoders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/tcp-decoders-and-encoders/</guid>
      <description>Earlier, we spoke of sources and sinks and the role they play in Wallaroo. In this section, we are going to dive more into how you work with sources and sinks. We&amp;rsquo;ll be covering two key concepts: Decoders and Encoders.
Reviewing our terms Source Ingress point for inputs from external systems into a Wallaroo application.
Sink Egress point for outputs from a Wallaroo application to external systems.
Decoder Code that transforms a stream of bytes from an external system into a series of application input types.</description>
    </item>
    
    <item>
      <title>Wallaroo Pony API Classes</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/api/</guid>
      <description>The Wallaroo Pony API allows developers to create Wallaroo applications in Pony.
Overview In order to create a Wallaroo application in Pony, you need to create the functions and classes that provide the required interfaces for each stage in your pipeline, and then connect them together in a topology structure. This topology structure should always be the last argument when calling Wallaroo.build_application(env, app_name, pipeline).
Table of Contents  Application Setup Computation State StateComputation Data Aggregation Key KeyExtractor Windows Sink TCPSink KafkaSink Sink Encoder Source TCPSource KafkaSource Source Decoder  Application Setup After your program loads, it executes its entry point function, Main.</description>
    </item>
    
    <item>
      <title>Word Count</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/word-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/word-count/</guid>
      <description>Word count is the canonical streaming data application. It&amp;rsquo;s canonical not because everyone needs to count words but because it&amp;rsquo;s a good platform for demonstrating how to do many of the everyday tasks in a streaming application.
This section will take you through our Wallaroo word count example. Along the way, we will introduce you to two new concepts: receiving and decoding data on a TCPSource, and splitting one incoming message into several outgoing ones.</description>
    </item>
    
    <item>
      <title>Writing Your Own Application</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/writing-your-own-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/writing-your-own-application/</guid>
      <description>In this section, we will go over the components that are required in order to write a Wallaroo Pony application. We will start with the stateless alerts.pony application from the examples section, then move on to an application that maintains and modifies state and uses partitioning to divide its work.
A Stateless Application - Alerts The alerts.pony application is going to receive transactions as its input stream, check for certain conditions that should trigger alerts, and then send out any triggered alerts to its sink.</description>
    </item>
    
    <item>
      <title>Writing Your Own Stateful Application</title>
      <link>https://docs.wallaroolabs.com/pony-tutorial/writing-your-own-stateful-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wallaroolabs.com/pony-tutorial/writing-your-own-stateful-application/</guid>
      <description>In this section, we will go over how to write a stateful application with the Wallaroo Pony API. If you haven&amp;rsquo;t reviewed the simple stateless Alerts application example yet, you can find it here.
A Stateful Application - Alerts Our stateful application is going to add state to the Alerts example. Again, it receives as its inputs messages representing transactions. But now instead of statelessly checking individual transactions to see if they pass certain thresholds, it will add each transaction amount to a running total.</description>
    </item>
    
  </channel>
</rss>